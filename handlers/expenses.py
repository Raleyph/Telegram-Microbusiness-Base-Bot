from aiogram import Router
from aiogram import types
from aiogram import F
from aiogram.filters import Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from datetime import datetime
import re

import database as db
import keyboards as kb
import graphic_representation as gp

router = Router()


class ExpensesState(StatesGroup):
    expenses_menu = State()
    set_expense_price = State()
    set_expense_date = State()
    set_expense_type = State()
    set_expense_description = State()
    set_expense_material_name = State()
    set_expense_material_count = State()
    set_expense_material_consumption = State()
    add_expense_material_confirm = State()
    add_expense_confirm = State()
    remove_expense = State()
    remove_expense_confirm = State()


# get income
@router.message(Text(text="–î–æ—Ö–æ–¥—ã üí∞"))
async def get_all_income(message: types.Message, state: FSMContext):
    try:
        db.get_expense_material_count()
        money = db.get_finance_sum()
        tips = db.get_tips_sum()

        await message.answer(f"<b>–°—É–º–º–∞ –¥–æ—Ö–æ–¥–∞:</b> {money} —É.–µ.\n"
                             f"<b>–°—É–º–º–∞ —á–∞–µ–≤—ã—Ö:</b> {tips} —É.–µ.\n"
                             f"<b>–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> {money + tips} —É.–µ.\n",
                             reply_markup=kb.get_main_keyboard(), parse_mode='html')
    except:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ö–æ—Ç—è-–±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å.",
                             reply_markup=kb.get_main_keyboard())
    await state.clear()


# get profitability
@router.message(Text(text="–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å üìà"))
async def get_profitability(message: types.Message, state: FSMContext):
    try:
        expenses = db.get_expenses()
        expense_dates = {}
        last_dates = []

        for expense in expenses:
            if expense[3] in expense_dates:
                expense_dates[expense[3]] += 1
            else:
                expense_dates[expense[3]] = 1

        current_value = max(expense_dates.values())

        for k, v in expense_dates.items():
            if v == current_value:
                last_dates.append(k)

        last_dates_sort = sorted(last_dates, key=lambda date: date[0])
        now_date = datetime.now()
        now_date_str = now_date.strftime("%Y-%m-%d")
        last_date_str = last_dates_sort[0]

        data = db.get_profitability_data(last_date_str, now_date_str)
        await message.answer(f"–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏ —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –æ—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—Ä—É–ø–Ω–æ–π –∑–∞–∫—É–ø–∫–∏, –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –±–µ–∑ —É—á–µ—Ç–∞ —á–∞–µ–≤—ã—Ö.\n"
                             f"\n"
                             f"<b>–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å:</b> {data[1]}%\n"
                             f"<b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> {data[0] if data[0] > 0 else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} —É.–µ.\n",
                             reply_markup=kb.get_main_keyboard(), parse_mode='html')
    except:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏! –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–Ω–µ—Å–µ–Ω—ã —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö.",
                             reply_markup=kb.get_main_keyboard())
    await state.clear()


# add expense
@router.message(Text(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"))
async def add_expense(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ExpensesState.set_expense_price)


@router.message(F.text, ExpensesState.set_expense_price)
async def set_expense_price(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(expense_price=message.text)
        await state.set_state(ExpensesState.set_expense_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2022-11-29")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")


@router.message(F.text, ExpensesState.set_expense_date)
async def set_expense_date(message: types.Message, state: FSMContext):
    if re.match(r'^202[2-5]-[0-1][0-9]-[0-3][0-9]$', message.text):
        await state.update_data(expense_date=message.text)
        await state.set_state(ExpensesState.set_expense_type)
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥", reply_markup=kb.get_expenses_type_keyboard())
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏!")


@router.callback_query(ExpensesState.set_expense_type)
async def set_expense_type(call: types.CallbackQuery, state: FSMContext):
    if call.data == "material":
        await state.set_state(ExpensesState.set_expense_material_name)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", reply_markup=types.ReplyKeyboardRemove)
        await state.update_data(expense_type="–ú–∞—Ç–µ—Ä–∏–∞–ª")
    if call.data == "salary":
        await state.set_state(ExpensesState.set_expense_description)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", reply_markup=types.ReplyKeyboardRemove)
        await state.update_data(expense_type="–ó–∞—Ä–ø–ª–∞—Ç–∞")
    if call.data == "transportation":
        await state.set_state(ExpensesState.set_expense_description, reply_markup=types.ReplyKeyboardRemove)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –ø–µ—Ä–µ–≤–æ–∑–∫–µ")
        await state.update_data(expense_type="–ü–µ—Ä–µ–≤–æ–∑–∫–∞")
    if call.data == "tax":
        await state.set_state(ExpensesState.set_expense_description, reply_markup=types.ReplyKeyboardRemove)
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ª–æ–≥–∞")
        await state.update_data(expense_type="–ù–∞–ª–æ–≥")


@router.message(ExpensesState.set_expense_material_name)
async def set_expense_material_name(message: types.Message, state: FSMContext):
    if len(message.text) > 2:
        await state.update_data(expense_name=message.text)
        await state.set_state(ExpensesState.set_expense_material_count)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
    else:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!")


@router.message(F.text, ExpensesState.set_expense_material_count)
async def set_expense_material_count(message: types.Message, state: FSMContext):
    if re.match(r"^[0-9]+,?[0-9]*$", message.text):
        await state.update_data(expense_count=float(message.text))
        await state.set_state(ExpensesState.set_expense_material_consumption)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–µ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ –∏—Å–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç 1.5.\n"
                             "–ï—Å–ª–∏ –∂–µ –æ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>\n",
                             reply_markup=kb.get_skip_button(), parse_mode='html')
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")


@router.message(F.text, ExpensesState.set_expense_material_consumption)
async def set_expense_material_consumption(message: types.Message, state: FSMContext):
    if re.match(r"^[0-9]+,?[0-9]*$", message.text) or message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        if len(message.text) < 6 or message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await state.update_data(expense_consumption=message.text)
            await state.set_state(ExpensesState.add_expense_material_confirm)

            expense_data = await state.get_data()
            await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞?\n"
                                 f"\n"
                                 f"<b>–î–∞—Ç–∞:</b> {expense_data['expense_date']}\n"
                                 f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {expense_data['expense_name']}\n"
                                 f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {expense_data['expense_price']} —É.–µ.\n"
                                 f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {expense_data['expense_count']}\n"
                                 f"{'<b>–†–∞—Å—Ö–æ–¥:</b> ' + expense_data['expense_consumption'] if expense_data['expense_consumption'] != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ''}\n",
                                 reply_markup=kb.get_confirm_keyboard(), parse_mode='html')
        else:
            await message.answer("–ù–µ –º–Ω–æ–≥–æ–≤–∞—Ç–æ –ª–∏?")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")


@router.callback_query(ExpensesState.add_expense_material_confirm)
async def add_expense_material_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data == "yes":
        expense_data = await state.get_data()
        db.set_expense_material(expense_data['expense_type'], expense_data['expense_name'],
                                expense_data['expense_price'], expense_data['expense_date'],
                                expense_data['expense_count'], expense_data['expense_consumption']
                                if expense_data['expense_consumption'] != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None)
        await call.message.answer("–†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.get_main_keyboard())
    elif call.data == "no":
        await call.message.answer("–û—Ç–º–µ–Ω–∞!", reply_markup=kb.get_main_keyboard())

    await state.clear()


@router.message(ExpensesState.set_expense_description)
async def set_expense_description(message: types.Message, state: FSMContext):
    if len(message.text) > 2:
        await state.update_data(expense_description=message.text)
        await state.set_state(ExpensesState.add_expense_confirm)
        expense_data = await state.get_data()
        string_expense_type = ""

        if expense_data['expense_type'] == "–ó–∞—Ä–ø–ª–∞—Ç–∞":
            string_expense_type = "–∑—Ä–∞–ø–ª–∞—Ç–µ"
        elif expense_data['expense_type'] == "–ü–µ—Ä–µ–≤–æ–∑–∫–∞":
            string_expense_type = "–ø–µ—Ä–µ–≤–æ–∑–∫–µ"
        elif expense_data['expense_type'] == "–ù–∞–ª–æ–≥":
            string_expense_type = "–Ω–∞–ª–æ–≥–µ"

        await state.update_data(string_type=string_expense_type)

        await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {string_expense_type}?\n"
                             f"\n"
                             f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {expense_data['expense_description']}\n"
                             f"<b>–†–∞—Å—Ö–æ–¥:</b> {expense_data['expense_price']} —É.–µ.\n"
                             f"<b>–î–∞—Ç–∞: </b> {expense_data['expense_date']}",
                             reply_markup=kb.get_main_keyboard(), parse_mode='html')
    else:
        await message.answer("–î–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ!")


@router.callback_query(ExpensesState.add_expense_confirm)
async def add_expense_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data == "yes":
        expense_data = await state.get_data()
        db.set_expenses(expense_data['expense_type'], expense_data['expense_price'], expense_data['expense_date'], expense_data['expense_description'])
        await call.message.answer(call.from_user.id, f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {expense_data['string_type']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                                  reply_markup=kb.get_main_keyboard())
    elif call.data == "no":
        await call.message.answer(call.from_user.id, "–û—Ç–º–µ–Ω–∞!", reply_markup=kb.get_main_keyboard())

    await state.clear()


# remove expense
@router.message(Text(text="–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"))
async def remove_expense(message: types.Message, state: FSMContext):
    all_expenses = db.get_expenses()

    if all_expenses:
        await state.set_state(ExpensesState.remove_expense)
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞—Å—Ö–æ–¥", reply_markup=kb.get_expenses_for_remove_keyboard(all_expenses))
    else:
        await message.answer("–†–∞—Å—Ö–æ–¥—ã –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã!", reply_markup=kb.get_main_keyboard())


@router.callback_query(ExpensesState.remove_expense)
async def remove_current_expense(call: types.CallbackQuery, state: FSMContext):
    expense = db.get_expense_from_id(call.data)

    await state.update_data(expense_id=call.data)
    await state.set_state(ExpensesState.remove_expense_confirm)
    await call.message.answer(f"–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –æ—Ç {expense[0][3]}: {expense[0][4] if expense[0][1] == '–ú–∞—Ç–µ—Ä–∏–∞–ª' else expense[0][9]}?",
                              reply_markup=kb.get_confirm_keyboard())


@router.callback_query(ExpensesState.remove_expense_confirm)
async def remove_expense_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data == "yes":
        expense_data = await state.get_data()
        db.remove_expense(expense_data['expense_id'])
        await call.message.answer("–†–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=kb.get_main_keyboard())
    elif call.data == "no":
        await call.message.answer("–û—Ç–º–µ–Ω–∞!", reply_markup=kb.get_main_keyboard())

    await state.clear()


# get expenses
@router.message(Text(text="–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤"))
async def get_expenses_list(message: types.Message):
    if db.get_expenses():
        image = types.FSInputFile(gp.get_expenses_dataframe())
        await message.answer_photo(image, reply_markup=kb.get_main_keyboard())
    else:
        await message.answer("–†–∞—Å—Ö–æ–¥—ã –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã!", reply_markup=kb.get_main_keyboard())
